name: 'Build and Publish Plugin'
description: 'Automatically build and publish plugins to their GitHub repositories'
inputs:
  python_version:
    description: 'Python version for building.'
    required: false
    default: '3.11'
  node_version:
    description: 'Node version for building'
    required: false
    default: '20'
  github_token:
    description: 'A GitHub token with the permissions to push back to this repository'
    required: true
    default: ${{ github.token }}
runs:
  using: 'composite'
  steps:
    # Checkout plugin source
    - name: Checkout plugin
      uses: actions/checkout@v4
      with:
        path: plugin
        submodules: recursive

    # Prepare build environment
    - name: Prepare build environment
      shell: bash
      id: prepare
      run: |
        # Create dummy repo config
        cat << EOF > config.json
        {
            "id": "repository.tmp",
            "name": "Build Repo",
            "icon": ""
        }
        EOF

        # Read plugin id and version from info.json
        plugin_id=$(cat plugin/info.json | jq -r .id)
        plugin_version=$(cat plugin/info.json | jq -r .version)
        echo "plugin_id=${plugin_id}" >> $GITHUB_OUTPUT
        echo "plugin_version=${plugin_version}" >> $GITHUB_OUTPUT

        # Install plugin into source directory for building
        mkdir -p source/
        mv -fv plugin source/${plugin_id}

    # Execute plugin repo gen action
    - name: Generate and Deploy Unmanic Plugin Repository
      uses: Unmanic/action.generate-unmanic-plugin-repo@master
      with:
        python_version: ${{ inputs.python_version }}
        node_version: ${{ inputs.node_version }}
        deploy_repo: 'false'
        github_token: ${{ inputs.github_token }}

    # Upload artifacts
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: plugin.${{ steps.prepare.outputs.plugin_id }}-v${{ steps.prepare.outputs.plugin_version }}
        path: repo/**/*.zip
        overwrite: 'true'

    # Generate tagged release (should not be updated)
    - name: Check Tag Already Exists
      uses: mukunku/tag-exists-action@v1.6.0
      id: check_tag_exists
      with: 
        tag: ${{ steps.prepare.outputs.plugin_version }}
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}

    - name: Generate Tagged Release
      uses: ncipollo/release-action@v1
      if: steps.check_tag_exists.outputs.exists == 'false'
      with:
        name: "Tagged Build: ${{ steps.prepare.outputs.plugin_version }}"
        body: "Versioned release"
        token: ${{ inputs.github_token }}
        artifacts: repo/**/*.zip
        generateReleaseNotes: true
        allowUpdates: false
        skipIfReleaseExists: true
        tag: ${{ steps.prepare.outputs.plugin_version }}
        commit: master

    # Generate latest development
    - name: Update Latest Release
      uses: ncipollo/release-action@v1
      with:
        name: "Development Build"
        body: "Latest development release"
        token: ${{ inputs.github_token }}
        artifacts: repo/**/*.zip
        generateReleaseNotes: true
        allowUpdates: true
        removeArtifacts: true
        replacesArtifacts: true
        tag: latest
        commit: master
        prerelease: true
